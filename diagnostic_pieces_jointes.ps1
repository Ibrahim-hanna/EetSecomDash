# Diagnostic des pi√®ces jointes
Write-Host "=== DIAGNOSTIC PI√àCES JOINTES ===" -ForegroundColor Yellow

# 1. V√©rifier que l'application est d√©marr√©e
Write-Host "`n1. V√©rification de l'application..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Application accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Application non accessible. D√©marrez l'application avec: ./mvnw spring-boot:run" -ForegroundColor Red
    exit 1
}

# 2. R√©cup√©rer tous les projets
Write-Host "`n2. R√©cup√©ration des projets..." -ForegroundColor Green
try {
    $projets = Invoke-RestMethod -Uri "http://localhost:8080/api/projets" -Method GET
    Write-Host "‚úÖ ${projets.Count} projets r√©cup√©r√©s" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration des projets" -ForegroundColor Red
    exit 1
}

# 3. Analyser chaque projet
Write-Host "`n3. Analyse des projets..." -ForegroundColor Green
$projetsAvecProblemes = @()
$projetsOK = @()

foreach ($projet in $projets) {
    Write-Host "`n--- Projet: $($projet.numeroProjet) ---" -ForegroundColor Cyan
    
    # V√©rifier si le projet a un ID
    if (-not $projet.id) {
        Write-Host "‚ùå Projet sans ID - probl√®me de base de donn√©es" -ForegroundColor Red
        $projetsAvecProblemes += $projet
        continue
    }
    
    # V√©rifier les pi√®ces jointes
    $piecesJointes = $projet.piecesJointes
    if (-not $piecesJointes) {
        Write-Host "‚ö†Ô∏è Aucune structure piecesJointes" -ForegroundColor Yellow
        $projetsAvecProblemes += $projet
        continue
    }
    
    # V√©rifier chaque type de pi√®ce jointe
    $types = @("contrat", "pvReceptionProvisoire", "pvReceptionDefinitive", "attestationReference", "suiviExecutionDetaille", "suiviReglementDetaille")
    $problemes = @()
    
    foreach ($type in $types) {
        $piece = $piecesJointes.$type
        if ($piece -and $piece.nomFichier) {
            Write-Host "  ‚úÖ $type : $($piece.nomFichier)" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö™ $type : Aucun fichier" -ForegroundColor Gray
        }
    }
    
    # V√©rifier si le projet a des pi√®ces jointes en base mais pas dans le DTO
    $hasPiecesInBase = $false
    if ($projet.contratPieceJointe -or $projet.pvReceptionProvisoire -or $projet.pvReceptionDefinitif -or 
        $projet.attestationReference -or $projet.suiviExecutionDetaillePieceJointe -or $projet.suiviReglementDetaillePieceJointe) {
        $hasPiecesInBase = $true
        Write-Host "  üîç Pi√®ces jointes d√©tect√©es en base de donn√©es" -ForegroundColor Blue
    }
    
    # Si le projet a des pi√®ces en base mais pas dans le DTO, c'est un probl√®me
    if ($hasPiecesInBase -and (-not $piecesJointes.contrat -and -not $piecesJointes.pvReceptionProvisoire -and 
        -not $piecesJointes.pvReceptionDefinitive -and -not $piecesJointes.attestationReference -and 
        -not $piecesJointes.suiviExecutionDetaille -and -not $piecesJointes.suiviReglementDetaille)) {
        Write-Host "  ‚ùå PROBL√àME: Pi√®ces en base mais pas dans le DTO" -ForegroundColor Red
        $projetsAvecProblemes += $projet
    } else {
        $projetsOK += $projet
    }
}

# 4. R√©sum√©
Write-Host "`n=== R√âSUM√â ===" -ForegroundColor Yellow
Write-Host "Projets OK: $($projetsOK.Count)" -ForegroundColor Green
Write-Host "Projets avec probl√®mes: $($projetsAvecProblemes.Count)" -ForegroundColor Red

if ($projetsAvecProblemes.Count -gt 0) {
    Write-Host "`nProjets avec probl√®mes:" -ForegroundColor Red
    foreach ($projet in $projetsAvecProblemes) {
        Write-Host "  - $($projet.numeroProjet) (ID: $($projet.id))" -ForegroundColor Red
    }
    
    Write-Host "`n=== SOLUTIONS ===" -ForegroundColor Yellow
    Write-Host "1. V√©rifiez que les fichiers existent dans le dossier 'uploads/'" -ForegroundColor Cyan
    Write-Host "2. Red√©marrez l'application pour forcer la relecture des donn√©es" -ForegroundColor Cyan
    Write-Host "3. V√©rifiez les logs de l'application pour des erreurs" -ForegroundColor Cyan
}

# 5. Test d'ajout de pi√®ce jointe
Write-Host "`n5. Test d'ajout de pi√®ce jointe..." -ForegroundColor Green
if ($projetsOK.Count -gt 0) {
    $testProjet = $projetsOK[0]
    Write-Host "Test avec le projet: $($testProjet.numeroProjet)" -ForegroundColor Cyan
    
    # Cr√©er un fichier de test
    $testContent = "Test file content"
    $testFile = "test_file.txt"
    $testContent | Out-File -FilePath $testFile -Encoding UTF8
    
    try {
        $formData = @{
            projetId = $testProjet.id
            type = "contrat"
            fichier = Get-Item $testFile
            description = "Fichier de test"
        }
        
        $response = Invoke-RestMethod -Uri "http://localhost:8080/api/pieces-jointes" -Method POST -Form $formData
        Write-Host "‚úÖ Test d'ajout r√©ussi" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors du test d'ajout: $($_.Exception.Message)" -ForegroundColor Red
    } finally {
        # Nettoyer le fichier de test
        if (Test-Path $testFile) {
            Remove-Item $testFile
        }
    }
}

Write-Host "`n=== DIAGNOSTIC TERMIN√â ===" -ForegroundColor Yellow 